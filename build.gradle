plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1'
description = 'Demo project for Spring Boot that displays food data from a database and an external api'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot starters (spring-boot-starter-logging включается автоматически)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop' // Основной стартер для AOP

    // JSON логирование
    implementation 'net.logstash.logback:logstash-logback-encoder:7.2'

    // Для retry
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'

    // Библиотека AspectJ
    implementation 'org.aspectj:aspectjweaver'

    // Для WebClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Database
    runtimeOnly 'org.postgresql:postgresql'

    // Utilities
    implementation 'com.github.vertical-blank:sql-formatter:2.0.4'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.retry:spring-retry'
    testImplementation 'org.springframework:spring-aspects'
    testImplementation 'io.projectreactor:reactor-test' // Для тестирования реактивного кода
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'

    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation 'com.squareup.okhttp3:okhttp:4.12.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'

    // Development
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

}

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        events = ['passed', 'skipped', 'failed']
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        exceptionFormat = 'full'
    }

    // Оптимизация производительности тестов
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 100

    jvmArgs = [
            '-XX:+EnableDynamicAgentLoading',
            '-Djdk.instrument.traceUsage=false',
            '-Xmx512m'
    ]
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

bootJar {
    archiveFileName = "${project.name}-${project.version}.jar"
    layered {
        enabled = true
    }
}

bootRun {
    sourceResources sourceSets.main
    jvmArgs = [
            '-XX:TieredStopAtLevel=1',
            '-Xmx512m',
            '-Dspring.profiles.active=dev'
    ]
}

springBoot {
    buildInfo()
}

// Кэширование для ускорения сборки
tasks.withType(AbstractCompile).configureEach {
    options.incremental = true
}